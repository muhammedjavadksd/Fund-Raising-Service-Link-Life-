"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerifyToken = exports.SelfWithdrawal = exports.RequestTransferV12 = exports.RequestTransfer = exports.RequestBatchTransferV12 = exports.RequestBatchTransfer = exports.RequestAsyncTransferV12 = exports.RequestAsyncTransfer = exports.RemoveBeneficiary = exports.Lend = exports.InternalTransferV12 = exports.InternalTransfer = exports.GetTransferStatusV12 = exports.GetTransferStatus = exports.GetIncidents = exports.GetCashgramStatus = exports.GetBeneficiaryId = exports.GetBeneficiary = exports.GetBatchTransferStatusV12 = exports.GetBatchTransferStatus = exports.GetBalanceV12 = exports.GetBalance = exports.GenerateBearerToken = exports.DirectTransferV12 = exports.DirectTransfer = exports.DeactivateCashgram = exports.CreateCashgram = exports.Cardpay = exports.BeneHistory = exports.AddBeneficiary = void 0;
const AddBeneficiary = { "body": { "title": "AddBeneficiaryRequest", "description": "Request Body for adding a new beneficiary", "type": "object", "properties": { "beneId": { "type": "string", "description": "Unique Beneficiary ID to identify the beneficiary. Alphanumeric and underscore (_) allowed (50 character limit)", "examples": ["JOHN18011343"] }, "name": { "type": "string", "description": "It is the name of the beneficiary. A maximum of 100 characters are allowed. Alphabets, numbers, white spaces ( ), and special characters are allowed.", "examples": ["john doe"] }, "email": { "type": "string", "description": "Beneficiaries email, string in email Id format (Ex: johndoe_1@cashfree.com) - should contain @ and dot (.) - (200 character limit)", "examples": ["johndoe@cashfree.com"] }, "phone": { "type": "string", "description": "Beneficiaries phone number, phone number registered in India (only digits, 8 - 12 characters after stripping +91)", "examples": ["9876543210"] }, "bankAccount": { "type": "string", "description": "Beneficiary bank account (9 - 18 alphanumeric character limit)", "examples": ["00111122233"] }, "ifsc": { "type": "string", "description": "Accounts IFSC (standard IFSC format) - length 11, first four bank IFSC and 5th digit 0", "examples": ["HDFC0000001"] }, "vpa": { "type": "string", "description": "Beneficiary VPA, alphanumeric, dot (.), hyphen (-), at sign (@), and underscore () allowed (100 character limit). Note: underscore () and dot (.) gets accepted before and after at sign (@), but hyphen (-) get only accepted before at sign (@)", "examples": ["test@upi"] }, "address1": { "type": "string", "description": "Beneficiaries address, alphanumeric and space allowed (but script, HTML tags gets sanitized or removed) (150 character limit)", "examples": ["ABC Road"] }, "address2": { "type": "string", "description": "Beneficiary address, alphanumeric and space allowed (but script, HTML tags gets sanitized or removed) (150 character limit)", "examples": ["XYZ Layout"] }, "city": { "type": "string", "description": "Beneficiary city, only alphabets and white space (50 character limit)", "examples": ["Bangalore"] }, "state": { "type": "string", "description": "Beneficiary state, only alphabets and white space (50 character limit)", "examples": ["Karnataka"] }, "pincode": { "type": "string", "description": "Beneficiaries pincode, only numbers (6 character limit)", "examples": ["560001"] } }, "required": ["beneId", "name", "email", "phone", "address1"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "AddBeneficiaryResponse", "description": "Response for creating new Beneficiary", "type": "object", "properties": { "status": { "type": "string" }, "message": { "type": "string" }, "subCode": { "type": "string" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "409": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "412": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "422": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.AddBeneficiary = AddBeneficiary;
const BeneHistory = { "metadata": { "allOf": [{ "type": "object", "properties": { "beneId": { "type": "string", "examples": ["VENKY_UPI"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The beneficiary id that you have created. Alphanumeric characters accepted." }, "startDate": { "type": "string", "examples": ["2021-05-27"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Start date for the desired period. Format - yyyy-mm-dd" }, "endDate": { "type": "string", "examples": ["2021-05-31"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "End date for the desired period. Format - yyyy-mm-dd. If start date is provided, end date is a mandatory. End date has to be a day less than current date." }, "perPage": { "type": "integer", "examples": [10], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Number of transactions to be displayed on the page. Maximum = 25. Default value set is 25." }, "page": { "type": "integer", "examples": [1], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Will show the latest transfers on the first page. Minimum = 1. Default value set is 1." } }, "required": ["beneId"] }, { "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "BeneficiaryHistoryResponse", "description": "Response for fetching Beneficiary history", "type": "object", "properties": { "status": { "type": "string" }, "message": { "type": "string" }, "subCode": { "type": "string" }, "data": { "type": "object", "properties": { "transfers": { "type": "array", "items": { "title": "BeneficiaryTransfer", "description": "Beneficiary Transfer Object", "type": "object", "properties": { "transferDate": { "type": "string", "examples": ["2020-06-16"] }, "amount": { "type": "string", "examples": ["1"] }, "mode": { "type": "string", "examples": ["IMPS"] }, "beneId": { "type": "string", "examples": ["John Doe"] }, "status": { "type": "string", "examples": ["SUCCESS"] } } } } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "422": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.BeneHistory = BeneHistory;
const Cardpay = { "body": { "title": "CardPayRequest", "description": "Card Pay Request", "type": "object", "properties": { "amount": { "type": "number", "format": "double", "description": "Amount you want to transfer. Amount should be >= 1.00. Decimals are allowed.", "examples": [1.2], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "transferId": { "type": "string", "description": "Unique transfer ID to identify the transfer. Alphanumeric characters and underscore are allowed. The maximum character limit is 40.", "examples": ["cardpay_11"] }, "token": { "type": "string", "description": "It is the tokenised card number or card token for this transfer.", "examples": ["4640837720072836"] }, "remarks": { "type": "string", "description": "Remarks for your reference. Alphanumeric characters and whitespace are allowed. The maximum character limit is 70.", "examples": ["Transfer to card"] }, "name": { "type": "string", "description": "The name of the beneficiary who receives the transfer amount.", "examples": ["John Doe"] }, "networkType": { "type": "string", "description": "Specify the card type - VISA/MASTERCARD.", "enum": ["VISA", "MASTERCARD"], "examples": ["VISA"] }, "cryptogram": { "type": "string", "description": "It contains formatted chip/cryptogram data relating to the token cryptogram. The maximum character limit is 600. It is optional for MASTERCARD and not required for VISA." }, "tokenExpiry": { "type": "string", "description": "Applicable only for MASTERCARD. The format for the valid token expiry date should be YYYY-MM. It cannot be null. Provide a valid tokenExpiry if collected from the customers. If unavailable, populate a static value with a forward year and month in the correct format (YYYY-MM). The maximum character limit is 10.", "examples": ["2026-07"] }, "cardType": { "type": "string", "description": "Specify if it is a debit or credit card. Values allowed: DEBIT/CREDIT. CREDIT is the default value if the parameter does not exist or is not specified.", "examples": ["CREDIT"] }, "tokenPANSequenceNumber": { "type": "string", "description": "A maximum of 3 alphanumeric characters are allowed. It is optional for MASTERCARD and not required for VISA." }, "ipAddress": { "type": "string", "description": "IP Address of the caller" }, "product": { "type": "string", "description": "Cashfree Product Name" } }, "required": ["token", "amount", "transferId", "cardType"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "TransferResponse", "description": "Transfer Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "string" }, "utr": { "type": "string" }, "acknowledged": { "type": "integer" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "201": { "title": "TransferResponse", "description": "Transfer Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "string" }, "utr": { "type": "string" }, "acknowledged": { "type": "integer" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "400": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "412": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "422": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.Cardpay = Cardpay;
const CreateCashgram = { "body": { "title": "CashgramCreateRequest", "description": "Cashgram Create Request", "type": "object", "properties": { "cashgramId": { "type": "string", "description": "Unique Id of the Cashgram. Alphanumeric, underscore (_), and hyphen (-) allowed (35 character limit)", "maxLength": 36, "examples": ["JOHaN10"] }, "amount": { "type": "number", "format": "double", "description": "Amount to be transferred, >= 1.00", "examples": ["1.00"], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "name": { "type": "string", "description": "Name of the contact", "maxLength": 100, "examples": ["John Doe"] }, "email": { "type": "string", "description": "Email of the contact", "maxLength": 200, "examples": ["johndoe@cashfree.com"] }, "phone": { "type": "string", "description": "Phone number of the contact", "examples": ["9876543210"] }, "linkExpiry": { "type": "string", "description": "Date to expire the cashgram link, Date format YYYY/MM/DD, maximum 30 days from the date of creation.", "maxLength": 10, "examples": ["2020/04/01"] }, "remarks": { "type": "string", "description": "Specify remarks, if any.", "examples": ["sample cashgram"] }, "notifyCustomer": { "type": "integer", "description": "If value is 1, a link is sent to customers phone and email.", "examples": [1] }, "validateAccount": { "type": "integer", "description": "Binary value (0,1) to decide whether to validate account or not" }, "payoutType": { "type": "string", "description": "Payout Type" }, "description": { "type": "string", "description": "Description of the cashgram" } }, "required": ["cashgramId", "amount", "name", "phone", "linkExpiry"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "CashgramCreateResponse", "description": "Cashgram Create Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "integer" }, "cashgramLink": { "type": "string" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "409": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.CreateCashgram = CreateCashgram;
const DeactivateCashgram = { "body": { "title": "CashgramDeactivateRequest", "description": "Cashgram Deactivate Request", "type": "object", "properties": { "cashgramId": { "type": "string", "description": "ID of the Cashgram to be deactivated. Alphanumeric and underscore (_) allowed (35 character limit)", "maxLength": 35, "examples": ["JOHaN10"] } }, "required": ["cashgramId"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "CashgramDeactivateResponse", "description": "Response for deactivating a cashgram", "type": "object", "properties": { "status": { "type": "string" }, "message": { "type": "string" }, "subCode": { "type": "string" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "404": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.DeactivateCashgram = DeactivateCashgram;
const DirectTransfer = { "body": { "title": "DirectTransferRequest", "description": "Direct Transfer Request", "type": "object", "properties": { "amount": { "type": "number", "format": "double", "description": "Amount to be transferred. Amount should be greater that INR 1.00. Decimals are allowed.", "examples": [30], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "transferId": { "type": "string", "description": "A unique ID to identify this transfer. Alphanumeric characters and underscores are allowed (40 character limit).", "examples": ["JUNOB2018142"] }, "transferMode": { "type": "string", "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer.", "examples": ["banktransfer"] }, "remarks": { "type": "string", "description": "Additional Remarks, if required.", "examples": ["test"] }, "beneDetails": { "type": "object", "description": "Object with the beneficiary details to whom amount is to be transferred", "properties": { "beneId": { "type": "string", "description": "Beneficiary Id. Alphanumeric characters allowed." }, "name": { "type": "string", "description": "Beneficiary name, only alphabets and white space (100 character limit)", "examples": ["Ranjiths"] }, "email": { "type": "string", "description": "Beneficiary email address, string in email Id format (Ex: johndoe_1@cashfree.com) - should contain @ and dot (.) - (200 character limit)", "examples": ["ranjiths@cashfree.com"] }, "phone": { "type": "string", "description": "Beneficiary phone number, phone number registered in India (only digits, 8 - 12 characters after stripping +91)", "examples": ["9999999999"] }, "bankAccount": { "type": "string", "description": "Beneficiary bank account (9 - 18 alphanumeric character limit) (Required in case of banktransfer, imps, neft mode)", "examples": ["026291800001191"] }, "ifsc": { "type": "string", "description": "Accounts IFSC (standard IFSC format) - length 11, first four bank IFSC and 5th digit 0 (Required in case of banktransfer, imps, neft mode)", "examples": ["YESB0000262"] }, "vpa": { "type": "string", "description": "Beneficiary VPA, alphanumeric, dot (.), hyphen (-), at sign (@), and underscore () allowed (100 character limit). Note: underscore () and dot (.) gets accepted before and after at sign (@), but hyphen (-) get only accepted before at sign (@) (Required in case of UPI)" }, "address1": { "type": "string", "description": "Beneficiary address. Alphanumeric characters and space allowed (150 character limit).", "examples": ["any_dummy_value"] }, "address2": { "type": "string", "description": "Beneficiary address, alphanumeric and space allowed (but script, HTML tags gets sanitized or removed) (150 character limit)" }, "city": { "type": "string", "description": "Beneficiary city, only alphabets and white space (50 character limit)" }, "state": { "type": "string", "description": "Beneficiary state, only alphabets and white space (50 character limit)" }, "pincode": { "type": "string", "description": "Beneficiaries pincode, only numbers (6 character limit)" } }, "required": ["name", "email", "phone"] } }, "required": ["amount", "transferId", "transferMode", "beneDetails"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "TransferResponse", "description": "Transfer Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "string" }, "utr": { "type": "string" }, "acknowledged": { "type": "integer" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.DirectTransfer = DirectTransfer;
const DirectTransferV12 = { "body": { "title": "DirectTransferRequestV12", "description": "Direct Transfer Request v1.2", "type": "object", "properties": { "amount": { "type": "number", "format": "double", "description": "Amount to be transferred. Amount should be greater that INR 1.00. Decimals are allowed.", "examples": [30], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "transferId": { "type": "string", "description": "A unique ID to identify this transfer. Alphanumeric characters and underscores are allowed (40 character limit).", "examples": ["JUNOB2018142"] }, "transferMode": { "type": "string", "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer.", "examples": ["banktransfer"] }, "remarks": { "type": "string", "description": "Additional Remarks, if required.", "examples": ["test"] }, "paymentInstrumentId": { "type": "string", "description": "Specify the fund source ID from where you want the amount to be debited.", "examples": ["YESB_CONNECTED"] }, "beneDetails": { "type": "object", "description": "Object with the beneficiary details to whom amount is to be transferred", "properties": { "beneId": { "type": "string", "description": "Beneficiary Id. Alphanumeric characters allowed.", "maxLength": 50 }, "name": { "type": "string", "description": "Beneficiary name, only alphabets and white space (100 character limit)", "maxLength": 100, "examples": ["Ranjiths"] }, "email": { "type": "string", "description": "Beneficiary email address, string in email Id format (Ex: johndoe_1@cashfree.com) - should contain @ and dot (.) - (200 character limit)", "maxLength": 200, "examples": ["ranjiths@cashfree.com"] }, "phone": { "type": "string", "description": "Beneficiary phone number, phone number registered in India (only digits, 8 - 12 characters after stripping +91)", "examples": ["9999999999"] }, "bankAccount": { "type": "string", "description": "Beneficiary bank account (9 - 18 alphanumeric character limit) (Required in case of banktransfer, imps, neft mode)", "maxLength": 40, "examples": ["026291800001191"] }, "ifsc": { "type": "string", "description": "Accounts IFSC (standard IFSC format) - length 11, first four bank IFSC and 5th digit 0 (Required in case of banktransfer, imps, neft mode)", "maxLength": 50, "examples": ["YESB0000262"] }, "vpa": { "type": "string", "description": "Beneficiary VPA, alphanumeric, dot (.), hyphen (-), at sign (@), and underscore () allowed (100 character limit). Note: underscore () and dot (.) gets accepted before and after at sign (@), but hyphen (-) get only accepted before at sign (@) (Required in case of UPI)", "maxLength": 100 }, "address1": { "type": "string", "description": "Beneficiary address. Alphanumeric characters and space allowed (150 character limit).", "examples": ["any_dummy_value"] }, "address2": { "type": "string", "description": "Beneficiary address, alphanumeric and space allowed (but script, HTML tags gets sanitized or removed) (150 character limit)" }, "city": { "type": "string", "description": "Beneficiary city, only alphabets and white space (50 character limit)" }, "state": { "type": "string", "description": "Beneficiary state, only alphabets and white space (50 character limit)" }, "pincode": { "type": "string", "description": "Beneficiaries pincode, only numbers (6 character limit)", "maxLength": 6 } } } }, "required": ["amount", "transferId", "transferMode", "beneDetails"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "TransferResponse", "description": "Transfer Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "string" }, "utr": { "type": "string" }, "acknowledged": { "type": "integer" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.DirectTransferV12 = DirectTransferV12;
const GenerateBearerToken = { "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "AuthorizeResponse", "description": "Response for generating Bearer Token", "type": "object", "properties": { "status": { "type": "string" }, "message": { "type": "string" }, "subCode": { "type": "string" }, "data": { "type": "object", "properties": { "token": { "type": "string" }, "expiry": { "type": "integer" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "401": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.GenerateBearerToken = GenerateBearerToken;
const GetBalance = { "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "BalanceResponse", "description": "Balance Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "balance": { "type": "number", "format": "double", "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "availableBalance": { "type": "string" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.GetBalance = GetBalance;
const GetBalanceV12 = { "metadata": { "allOf": [{ "type": "object", "properties": { "paymentInstrumentId": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Payment Instrument ID" } }, "required": [] }, { "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "BalanceResponse", "description": "Balance Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "balance": { "type": "number", "format": "double", "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "availableBalance": { "type": "string" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "422": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.GetBalanceV12 = GetBalanceV12;
const GetBatchTransferStatus = { "metadata": { "allOf": [{ "type": "object", "properties": { "batchTransferId": { "type": "string", "examples": ["test_batch_format_01"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Batch transfer ID to fetch the status" } }, "required": [] }, { "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "BatchTransferStatusResponse", "description": "Batch Transfer Status Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "rowCount": { "type": "integer" }, "referenceId": { "type": "integer" }, "transfers": { "type": "array", "items": { "title": "BatchTransferEntry", "description": "Batch Transfer", "type": "object", "properties": { "transferId": { "type": "string", "examples": ["PTM_00052312126"] }, "paymentInstrumentId": { "type": "string" }, "beneId": { "type": "string", "examples": ["9999999999_18875"] }, "referenceId": { "type": "string", "examples": [1523969543] }, "bankAccount": { "type": "string", "examples": ["9999999999"] }, "ifsc": { "type": "string", "examples": ["PYTM0000001"] }, "amount": { "type": "number", "format": "double", "examples": ["12.00"], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "remarks": { "type": "string" }, "utr": { "type": "string", "examples": ["W1532082926"] }, "addedOn": { "type": "string", "examples": ["2018-07-20"] }, "processedOn": { "type": "string", "examples": ["2018-07-20"] }, "status": { "type": "string", "examples": ["SUCCESS"] }, "failureReason": { "type": "string" } } } } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "404": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.GetBatchTransferStatus = GetBatchTransferStatus;
const GetBatchTransferStatusV12 = { "metadata": { "allOf": [{ "type": "object", "properties": { "batchTransferId": { "type": "string", "examples": ["test_batch_format_01"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Batch transfer ID to fetch the status" } }, "required": ["batchTransferId"] }, { "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "BatchTransferStatusResponseV12", "description": "Batch Transfer Status Response v1.2", "type": "object", "properties": { "status": { "type": "string", "examples": ["SUCCESS"] }, "subCode": { "type": "string", "examples": ["200"] }, "message": { "type": "string", "examples": ["Data retrieved successfully"] }, "data": { "type": "object", "properties": { "rowCount": { "type": "integer", "examples": [2] }, "referenceId": { "type": "integer", "examples": [1582] }, "paymentInstrumentId": { "type": "string", "examples": ["CASHFREE_1"] }, "transfers": { "type": "array", "items": { "title": "BatchTransferEntryV12", "description": "Batch Transfer v1.2", "type": "object", "properties": { "transferId": { "type": "string", "examples": ["PTM_00121241112"] }, "beneId": { "type": "string", "examples": ["9999999999_18875"] }, "referenceId": { "type": "string", "examples": [1523969542] }, "bankAccount": { "type": "string", "examples": ["9999999999"] }, "ifsc": { "type": "string", "examples": ["PYTM0000001"] }, "amount": { "type": "number", "format": "double", "examples": ["12.00"], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "remarks": { "type": "string" }, "utr": { "type": "string", "examples": ["W1532082925"] }, "addedOn": { "type": "string", "examples": ["2018-07-20"] }, "processedOn": { "type": "string", "examples": ["2018-07-20"] }, "status": { "type": "string", "examples": ["SUCCESS"] }, "failureReason": { "type": "string" } } } } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "404": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.GetBatchTransferStatusV12 = GetBatchTransferStatusV12;
const GetBeneficiary = { "metadata": { "allOf": [{ "type": "object", "properties": { "beneId": { "type": "string", "examples": ["JOHN18011"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "The bene_id passed in the request during the creation of the beneficiary" } }, "required": ["beneId"] }, { "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "GetBeneficiaryResponse", "description": "Response for getting Beneficiary by id", "type": "object", "properties": { "status": { "type": "string" }, "message": { "type": "string" }, "subCode": { "type": "string" }, "data": { "type": "object", "properties": { "beneId": { "type": "string" }, "name": { "type": "string" }, "groupName": { "type": "string" }, "email": { "type": "string" }, "phone": { "type": "string" }, "address1": { "type": "string" }, "address2": { "type": "string" }, "city": { "type": "string" }, "state": { "type": "string" }, "pincode": { "type": "string" }, "bankAccount": { "type": "string" }, "ifsc": { "type": "string" }, "status": { "type": "string" }, "vpa": { "type": "string" }, "addedOn": { "type": "string" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "404": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.GetBeneficiary = GetBeneficiary;
const GetBeneficiaryId = { "metadata": { "allOf": [{ "type": "object", "properties": { "bankAccount": { "type": "string", "examples": ["00111122233"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Bank Account of beneficiary" }, "ifsc": { "type": "string", "examples": ["HDFC0000001"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "IFSC code of beneficiary" } }, "required": ["bankAccount", "ifsc"] }, { "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "GetBeneficiaryIDResponse", "description": "Response for getting Beneficiary id by bank account and ifsc", "type": "object", "properties": { "status": { "type": "string" }, "message": { "type": "string" }, "subCode": { "type": "string" }, "data": { "type": "object", "properties": { "beneId": { "type": "string" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "404": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.GetBeneficiaryId = GetBeneficiaryId;
const GetCashgramStatus = { "metadata": { "allOf": [{ "type": "object", "properties": { "cashgramId": { "type": "string", "examples": ["JOHaN10"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "ID of the Cashgram" } }, "required": ["cashgramId"] }, { "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "CashgramStatusResponse", "description": "Cashgram Status Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "cashgramStatus": { "type": "string" }, "reason": { "type": "string" }, "referenceId": { "type": "integer" }, "cashgramId": { "type": "string" }, "cashgramLink": { "type": "string" }, "redeemRefId": { "type": "integer" }, "utr": { "type": "string" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "404": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.GetCashgramStatus = GetCashgramStatus;
const GetIncidents = { "metadata": { "allOf": [{ "type": "object", "properties": { "status": { "type": "string", "examples": ["ALL"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Incident status - RESOLVED/UNRESOLVED/ALL are the allowed values Default value is UNRESOLVED if not provided" }, "startTime": { "type": "string", "examples": ["2022-01-01 00:00:00"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Start Time for the desired period. Format yyyy-mm-dd hh:mm:ss" }, "endTime": { "type": "string", "examples": ["2022-01-05 23:59:59"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "End Time for the desired period. Format yyyy-mm-dd hh:mm:ss. Default values are current day start Time(00:00:00) and end Time(23:59:59) if not provided." }, "entityCode": { "type": "string", "examples": ["CIUB"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Code for the entity(BANK) on which the incidents are created." } }, "required": [] }, { "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "GetIncidentsResponse", "description": "Response for getting incidents", "type": "object", "properties": { "status": { "type": "string" }, "message": { "type": "string" }, "subCode": { "type": "string" }, "data": { "type": "object", "properties": { "incidents": { "type": "array", "items": { "title": "IncidentExternal", "description": "External Incident", "type": "object", "properties": { "id": { "type": "integer" }, "type": { "type": "string" }, "entity": { "type": "string" }, "mode": { "type": "string" }, "createdAt": { "type": "string" }, "resolvedAt": { "type": "string" }, "isScheduled": { "type": "boolean" }, "isResolved": { "type": "boolean" }, "impact": { "type": "string" }, "entityName": { "type": "string" }, "entityCode": { "type": "string" } } } } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "422": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.GetIncidents = GetIncidents;
const GetTransferStatus = { "metadata": { "allOf": [{ "type": "object", "properties": { "referenceId": { "type": "string", "examples": ["10023"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Reference ID of the transaction. (Either referenceId or transferId is mandatory)" }, "transferId": { "type": "string", "examples": ["Sample_test"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Transfer ID of the transaction." } }, "required": [] }, { "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "GetTransferStatusResponse", "description": "Transfer Status Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "transfer": { "type": "object", "properties": { "transferId": { "type": "string" }, "referenceId": { "type": "string" }, "bankAccount": { "type": "string" }, "ifsc": { "type": "string" }, "beneId": { "type": "string" }, "amount": { "type": "number", "format": "double", "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "status": { "type": "string" }, "utr": { "type": "string" }, "addedOn": { "type": "string" }, "processedOn": { "type": "string" }, "reason": { "type": "string" }, "transferMode": { "type": "string" }, "acknowledged": { "type": "integer" }, "phone": { "type": "string" }, "vpa": { "type": "string" }, "paymentInstrumentId": { "type": "string" } } } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "404": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.GetTransferStatus = GetTransferStatus;
const GetTransferStatusV12 = { "metadata": { "allOf": [{ "type": "object", "properties": { "referenceId": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Reference ID of the transaction. (Either referenceId or transferId is mandatory)" }, "transferId": { "type": "string", "$schema": "http://json-schema.org/draft-04/schema#", "description": "Transfer ID of the transaction." } }, "required": [] }, { "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "GetTransferStatusResponse", "description": "Transfer Status Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "transfer": { "type": "object", "properties": { "transferId": { "type": "string" }, "referenceId": { "type": "string" }, "bankAccount": { "type": "string" }, "ifsc": { "type": "string" }, "beneId": { "type": "string" }, "amount": { "type": "number", "format": "double", "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "status": { "type": "string" }, "utr": { "type": "string" }, "addedOn": { "type": "string" }, "processedOn": { "type": "string" }, "reason": { "type": "string" }, "transferMode": { "type": "string" }, "acknowledged": { "type": "integer" }, "phone": { "type": "string" }, "vpa": { "type": "string" }, "paymentInstrumentId": { "type": "string" } } } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "404": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.GetTransferStatusV12 = GetTransferStatusV12;
const InternalTransfer = { "body": { "title": "InternalTransferRequest", "description": "Internal Transfer Request", "type": "object", "properties": { "amount": { "type": "number", "format": "double", "description": "Amount to be transferred. Number (>=1)", "examples": [10.5], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "rechargeAccount": { "type": "string", "description": "Cashfree internal recharge account number. Alphanumeric allowed", "examples": ["492372992"] }, "transferId": { "type": "string", "description": "A unique ID to identify this transfer. Alphanumeric, hyphen and underscore (_) allowed (40 character limit). If the value is not passed, the id will be autogenerated." } }, "required": ["amount", "rechargeAccount"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "InternalTransferResponse", "description": "Internal Transfer Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "transferId": { "type": "string" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "404": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "422": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.InternalTransfer = InternalTransfer;
const InternalTransferV12 = { "body": { "title": "InternalTransferRequestV12", "description": "Internal Transfer Request v1.2", "type": "object", "properties": { "amount": { "type": "number", "format": "double", "description": "Amount to be transferred. Number (>=1)", "examples": [10.5], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "rechargeAccount": { "type": "string", "description": "It is the Cashfree Payments' internal recharge account number. Alphanumeric characters are allowed." }, "transferId": { "type": "string", "description": "It is the unique ID to identify the transfer. Alphanumeric, hyphen (-), and underscore (_) characters are allowed. Maximum character limit is 40. The ID is auto-generated if the parameter is left blank.", "examples": ["testingw123"] }, "paymentInstrumentId": { "type": "string", "description": "It is the unique ID to identify the fund source from which you want to transfer the money. Alphanumeric characters are allowed.", "examples": ["COLENDING_WALLET_336561_8888982"] }, "toPaymentInstrumentId": { "type": "string", "description": "It is the unique ID to identify the fund source where you want to deposit the money. Alphanumeric characters are allowed.", "examples": ["COLENDING_WALLET_336561_8888981"] }, "remarks": { "type": "string", "description": "Any remarks if required.", "examples": ["some remarks"] } }, "required": ["amount"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "InternalTransferResponse", "description": "Internal Transfer Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "transferId": { "type": "string" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "422": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.InternalTransferV12 = InternalTransferV12;
const Lend = { "body": { "title": "LendRequest", "description": "Lend Request", "type": "object", "properties": { "amount": { "type": "number", "format": "double", "description": "It is the loan amount. It should be equal to or greater than 1.00.", "examples": ["1000"], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "beneId": { "type": "string", "description": "It is the unique ID to identify the beneficiary. Only alphanumeric characters are allowed.", "examples": ["bene1"] }, "loanId": { "type": "string", "description": "It is the unique ID to identify the loan. Only alphanumeric characters are allowed.", "examples": ["laon1"] }, "remarks": { "type": "string" }, "transferMode": { "type": "string", "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer.", "examples": ["imps"] }, "transferType": { "type": "string" }, "serviceCharges": { "type": "array", "description": "It is the service charges that need to be disbursed to different parties.", "items": { "title": "LoanDisbursalServiceCharge", "description": "Loan Disbursal Service Charge", "type": "object", "properties": { "key": { "type": "string", "description": "Service Charge Name", "examples": ["something"] }, "value": { "type": "number", "format": "double", "description": "Service Charge Amount", "examples": ["50"], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 } }, "required": ["key", "value"] } }, "beneDetails": { "type": "object", "description": "It is the details of the beneficiary.", "properties": { "beneId": { "type": "string", "description": "Beneficiary Id. Alphanumeric characters allowed.", "examples": ["bene1"] }, "name": { "type": "string", "description": "It is the name of the beneficiary. It should be a maximum of 100 characters. Only alphabets and whitespaces ( ) are allowed." }, "email": { "type": "string", "description": "It is the email address of the beneficiary. A maximum of 200 characters are allowed. The value should contain @ and period (.)." }, "phone": { "type": "string", "description": "It is the phone number of the beneficiary. The phone number must be registered in India. Only numeric values are allowed. It should be between 8 and 12 characters excluding +91." }, "bankAccount": { "type": "string", "description": "It is the bank account of the beneficiary. It must be between 9-18 alphanumeric characters. It is a required parameter in the case of banktransfer, imps, and neft." }, "ifsc": { "type": "string", "description": "The IFSC information of the bank account of the dealer/distributor who raised the invoice for the customer to pay. It should be an alphanumeric value of 11 characters. The first 4 characters should be alphabets, the 5th character should be a 0, and the remaining 6 characters should be numerals." }, "vpa": { "type": "string", "description": "It is the virtual payment address of the beneficiary. A maximum of 100 characters are allowed. Accepted values: alphanumeric, period (.), hyphen (-), at sign (@), underscore (). Underscore () and period (.) are accepted before and after at sign (@). Hyphen (-) is accepted only before at sign (@)." }, "address1": { "type": "string", "description": "It is the address of the beneficiary. A maximum of 150 characters are allowed. Only alphanumeric values and whitespaces ( ) are allowed." }, "address2": { "type": "string", "description": "Beneficiary address, alphanumeric and space allowed (but script, HTML tags gets sanitized or removed) (150 character limit)" }, "city": { "type": "string", "description": "Beneficiary city, only alphabets and white space (50 character limit)" }, "state": { "type": "string", "description": "Beneficiary state, only alphabets and white space (50 character limit)" }, "pincode": { "type": "string", "description": "Beneficiaries pincode, only numbers (6 character limit)" } }, "required": ["name", "email", "phone", "address1"] } }, "required": ["loanId", "serviceCharges"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "TransferResponse", "description": "Transfer Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "string" }, "utr": { "type": "string" }, "acknowledged": { "type": "integer" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "201": { "title": "TransferResponse", "description": "Transfer Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "string" }, "utr": { "type": "string" }, "acknowledged": { "type": "integer" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "400": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "422": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.Lend = Lend;
const RemoveBeneficiary = { "body": { "title": "RemoveBeneficiaryRequest", "description": "Request Body for removing a new beneficiary", "type": "object", "properties": { "beneId": { "type": "string", "description": "Beneficiaries Id to delete, alphanumeric and underscore allowed (50 character limit)", "examples": ["JOHN18011343"] } }, "required": ["beneId"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "RemoveBeneficiaryResponse", "description": "Response for removing Beneficiary", "type": "object", "properties": { "status": { "type": "string" }, "message": { "type": "string" }, "subCode": { "type": "string" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.RemoveBeneficiary = RemoveBeneficiary;
const RequestAsyncTransfer = { "body": { "title": "TransferRequest", "description": "Transfer Request", "type": "object", "properties": { "amount": { "type": "number", "format": "double", "description": "amount to be transferred. Decimals allowed (>= 1.00)", "examples": ["1.00"], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "beneId": { "type": "string", "description": "Beneficiary Id. Alphanumeric characters allowed.", "maxLength": 50, "examples": ["JOHN18011"] }, "transferId": { "type": "string", "description": "A unique Id to identify this transfer. Alphanumeric and underscore (_) allowed (40 character limit).", "maxLength": 40, "examples": ["JUNOB2018"] }, "transferMode": { "type": "string", "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer.", "maxLength": 20 }, "remarks": { "type": "string", "description": "Additional remarks, if any. Alphanumeric and white spaces allowed (70 characters limit).", "maxLength": 70 }, "transferType": { "type": "string", "description": "Transfer Type", "maxLength": 7 }, "ipAddress": { "type": "string", "description": "IP Address of the caller" }, "product": { "type": "string", "description": "Cashfree Product Name" }, "rda": { "type": "object", "description": "Rupee Drawing Arrangement", "properties": { "quoteId": { "type": "string", "description": "Quote ID" }, "requestCurrency": { "type": "string", "description": "Request Currency" }, "sendingCurrency": { "type": "string", "description": "Sending Currency" }, "receivingCurrency": { "type": "string", "description": "Receiving Currency" }, "type": { "type": "string", "description": "RDA Type", "enum": ["inttransfer", "p2p", "p2b", "b2p", "b2b"] }, "senderMobNo": { "type": "string", "description": "Sender Mobile Number" }, "senderKyc": { "type": "object", "description": "Sender KYC Details", "properties": { "nationality": { "type": "string", "description": "Sender's Nationality" }, "dateOfBirth": { "type": "string", "description": "Sender's Date of Birth" }, "document": { "type": "object", "description": "Sender's Document", "properties": { "idType": { "type": "string", "description": "Document Type" }, "idNumber": { "type": "string", "description": "Document Number" }, "expiryDate": { "type": "string", "description": "Document expiration date" } }, "required": ["idType", "idNumber", "expiryDate"] }, "postalAddress": { "type": "object", "description": "Sender's Postal Address", "properties": { "addressLine1": { "type": "string", "description": "Address Line 1" }, "city": { "type": "string", "description": "City" }, "country": { "type": "string", "description": "Country" } }, "required": ["addressLine1", "city", "country"] }, "subjectName": { "type": "object", "description": "Sender's Name", "properties": { "firstName": { "type": "string", "description": "First Name" }, "lastName": { "type": "string", "description": "Last Name" }, "fullName": { "type": "string", "description": "Full Name" } }, "required": ["firstName", "lastName", "fullName"] }, "primaryContactCountryCode": { "type": "string", "description": "Primary Contact's Country Code" }, "primaryContactNo": { "type": "string", "description": "Primary Contact Number" }, "primaryContactNoType": { "type": "string", "description": "Primary Contact Type" } }, "required": ["nationality", "dateOfBirth", "document", "postalAddress", "subjectName"] }, "receivingCountry": { "type": "string", "description": "Receiving Country" }, "remittancePurpose": { "type": "string", "description": "Remittance Purpose" }, "sourceOfFunds": { "type": "string", "description": "Source Of Funds" }, "relationshipSender": { "type": "string", "description": "Relationship with Sender" }, "originCountry": { "type": "string", "description": "Country of origin" }, "senderBusinessKyc": { "type": "object", "description": "Business KYC details", "properties": { "pinCode": { "type": "string", "description": "Pincode" }, "address": { "type": "string", "description": "Address" }, "primaryContactCountryCode": { "type": "string", "description": "Primary Contact's Country Code" }, "primaryContactNo": { "type": "string", "description": "Primary Contact Number" }, "email": { "type": "string", "description": "Business Email ID" }, "name": { "type": "string", "description": "Business Name" }, "addressCountryCode": { "type": "string", "description": "Business Address Country Code" }, "countryCode": { "type": "string", "description": "Country Code" }, "regType": { "type": "string", "description": "Registration Type" }, "regIssuedBy": { "type": "string", "description": "Registration Issued By" }, "regIssuedAt": { "type": "string", "description": "Registration Issued At" }, "regNumber": { "type": "string", "description": "Registration Number" }, "regIssueDate": { "type": "string", "description": "Registration Issued Date" }, "idValidThru": { "type": "string", "description": "Registration ID Validation Date" } }, "required": ["address", "primaryContactCountryCode", "primaryContactNo", "email", "name", "countryCode", "regType", "regNumber", "regIssueDate", "idValidThru"] } }, "required": ["senderMobNo", "remittancePurpose", "sourceOfFunds", "originCountry"] } }, "required": ["beneId", "amount", "transferId"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "TransferAsyncResponse", "description": "Transfer Async Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "string" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "422": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.RequestAsyncTransfer = RequestAsyncTransfer;
const RequestAsyncTransferV12 = { "body": { "title": "TransferRequestV12", "description": "Transfer Request v1.2", "type": "object", "properties": { "amount": { "type": "number", "format": "double", "description": "amount to be transferred. Decimals allowed (>= 1.00)", "examples": ["1.00"], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "beneId": { "type": "string", "description": "Beneficiary Id. Alphanumeric characters allowed.", "examples": ["JOHN18011"] }, "transferId": { "type": "string", "description": "A unique Id to identify this transfer. Alphanumeric and underscore (_) allowed (40 character limit).", "examples": ["JUNOB2018"] }, "transferMode": { "type": "string", "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer." }, "remarks": { "type": "string", "description": "Additional remarks, if any. Alphanumeric and white spaces allowed (70 characters limit)." }, "transferType": { "type": "string", "description": "Transfer Type", "maxLength": 7 }, "ipAddress": { "type": "string", "description": "IP Address of the caller" }, "product": { "type": "string", "description": "Cashfree Product Name" }, "paymentInstrumentId": { "type": "string", "description": "Specify the fund source ID from where you want the amount to be debited." } }, "required": ["beneId", "amount", "transferId"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "TransferAsyncResponse", "description": "Transfer Async Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "string" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.RequestAsyncTransferV12 = RequestAsyncTransferV12;
const RequestBatchTransfer = { "body": { "title": "BatchTransferRequest", "description": "Batch Transfer Request", "type": "object", "properties": { "batchTransferId": { "type": "string", "description": "Unique Id of the Batch Transfer, alphanumeric and underscore allowed (60 character limit)", "examples": ["abc-12356"] }, "batchFormat": { "type": "string", "description": "Format of the batch transfers, valid values are, BENEFICIARY_ID, BANK_ACCOUNT, UPI, PAYTM, AMAZONPAY.", "enum": ["BENEFICIARY_ID", "BANK_ACCOUNT", "UPI", "PAYTM", "AMAZONPAY"], "examples": ["BANK_ACCOUNT"] }, "deleteBene": { "type": "integer", "description": "Flag to delete and read new beneficiaries if a beneficiary with the same Beneficiary Id is available. When the batch transfer format is BANK_ACCOUNT" }, "batch": { "type": "array", "description": "An array of transfer objects", "items": { "title": "CreateTransferBatch", "description": "Batch Transfer Request", "type": "object", "properties": { "transferId": { "type": "string", "description": "A unique ID to identify this transfer. Alphanumeric, hyphen and underscore (_) allowed (40 character limit).", "maxLength": 40, "examples": ["1234"] }, "amount": { "type": "number", "format": "double", "description": "Amount to be transferred. Number (>=1)", "examples": ["1"], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "remarks": { "type": "string", "description": "Any remarks if required.", "maxLength": 70, "examples": ["Transfer with Id 12356"] }, "beneId": { "type": "string", "description": "Beneficiary Id. Alphanumeric characters allowed.", "maxLength": 50 }, "name": { "type": "string", "description": "It is the name of the beneficiary. A maximum of 100 characters are allowed.", "maxLength": 100, "examples": ["john doe"] }, "email": { "type": "string", "description": "Beneficiaries email, string in email Id format (Ex: johndoe_1@cashfree.com) - should contain @ and dot (.) - (200 character limit)", "maxLength": 200, "examples": ["johndoe@cashfree.com"] }, "phone": { "type": "string", "description": "Beneficiaries phone number, phone number registered in India", "maxLength": 11, "examples": [9876543210] }, "bankAccount": { "type": "string", "description": "Beneficiary bank account (only alphanumeric characters allowed)", "maxLength": 40, "examples": ["00111122233"] }, "ifsc": { "type": "string", "description": "Accounts IFSC (standard IFSC format)", "maxLength": 50, "examples": ["HDFC0000001"] }, "vpa": { "type": "string", "description": "Beneficiary VPA, alphanumeric, dot (.), hyphen (-), at sign (@), and underscore () allowed (100 character limit). Note: underscore () and dot (.) gets accepted before and after at sign (@), but hyphen (-) get only accepted before at sign (@)" }, "transferMode": { "type": "string", "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer." } }, "required": ["transferId", "amount"] } } }, "required": ["batchTransferId", "batchFormat", "batch"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "TransferAsyncResponse", "description": "Transfer Async Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "string" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "409": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "422": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.RequestBatchTransfer = RequestBatchTransfer;
const RequestBatchTransferV12 = { "body": { "title": "BatchTransferRequestV12", "description": "Batch Transfer Request v1.2", "type": "object", "properties": { "batchTransferId": { "type": "string", "description": "Unique Id of the Batch Transfer, alphanumeric and underscore allowed (60 character limit)", "examples": ["batch_req_21"] }, "batchFormat": { "type": "string", "description": "Format of the batch transfers, valid values are, BENEFICIARY_ID, BANK_ACCOUNT, UPI, PAYTM, AMAZONPAY.", "enum": ["BENEFICIARY_ID", "BANK_ACCOUNT", "UPI", "PAYTM", "AMAZONPAY"], "examples": ["BANK_ACCOUNT"] }, "deleteBene": { "type": "integer", "description": "Flag to delete and read new beneficiaries if a beneficiary with the same Beneficiary Id is available. When the batch transfer format is BANK_ACCOUNT" }, "paymentInstrumentId": { "type": "string", "description": "Specify the payment instrument from where you want the amount to be debited.", "examples": ["IBL_CONNECTED"] }, "batch": { "type": "array", "description": "An array of transfer objects", "items": { "title": "CreateTransferBatch", "description": "Batch Transfer Request", "type": "object", "properties": { "transferId": { "type": "string", "description": "A unique ID to identify this transfer. Alphanumeric, hyphen and underscore (_) allowed (40 character limit).", "maxLength": 40, "examples": ["1234"] }, "amount": { "type": "number", "format": "double", "description": "Amount to be transferred. Number (>=1)", "examples": ["1"], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "remarks": { "type": "string", "description": "Any remarks if required.", "maxLength": 70, "examples": ["Transfer with Id 12356"] }, "beneId": { "type": "string", "description": "Beneficiary Id. Alphanumeric characters allowed.", "maxLength": 50 }, "name": { "type": "string", "description": "It is the name of the beneficiary. A maximum of 100 characters are allowed.", "maxLength": 100, "examples": ["john doe"] }, "email": { "type": "string", "description": "Beneficiaries email, string in email Id format (Ex: johndoe_1@cashfree.com) - should contain @ and dot (.) - (200 character limit)", "maxLength": 200, "examples": ["johndoe@cashfree.com"] }, "phone": { "type": "string", "description": "Beneficiaries phone number, phone number registered in India", "maxLength": 11, "examples": [9876543210] }, "bankAccount": { "type": "string", "description": "Beneficiary bank account (only alphanumeric characters allowed)", "maxLength": 40, "examples": ["00111122233"] }, "ifsc": { "type": "string", "description": "Accounts IFSC (standard IFSC format)", "maxLength": 50, "examples": ["HDFC0000001"] }, "vpa": { "type": "string", "description": "Beneficiary VPA, alphanumeric, dot (.), hyphen (-), at sign (@), and underscore () allowed (100 character limit). Note: underscore () and dot (.) gets accepted before and after at sign (@), but hyphen (-) get only accepted before at sign (@)" }, "transferMode": { "type": "string", "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer." } }, "required": ["transferId", "amount"] } } }, "required": ["batchTransferId", "batchFormat", "batch"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "TransferAsyncResponse", "description": "Transfer Async Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "string" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "409": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "422": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.RequestBatchTransferV12 = RequestBatchTransferV12;
const RequestTransfer = { "body": { "title": "TransferRequest", "description": "Transfer Request", "type": "object", "properties": { "amount": { "type": "number", "format": "double", "description": "amount to be transferred. Decimals allowed (>= 1.00)", "examples": ["1.00"], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "beneId": { "type": "string", "description": "Beneficiary Id. Alphanumeric characters allowed.", "maxLength": 50, "examples": ["JOHN18011"] }, "transferId": { "type": "string", "description": "A unique Id to identify this transfer. Alphanumeric and underscore (_) allowed (40 character limit).", "maxLength": 40, "examples": ["JUNOB2018"] }, "transferMode": { "type": "string", "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer.", "maxLength": 20 }, "remarks": { "type": "string", "description": "Additional remarks, if any. Alphanumeric and white spaces allowed (70 characters limit).", "maxLength": 70 }, "transferType": { "type": "string", "description": "Transfer Type", "maxLength": 7 }, "ipAddress": { "type": "string", "description": "IP Address of the caller" }, "product": { "type": "string", "description": "Cashfree Product Name" }, "rda": { "type": "object", "description": "Rupee Drawing Arrangement", "properties": { "quoteId": { "type": "string", "description": "Quote ID" }, "requestCurrency": { "type": "string", "description": "Request Currency" }, "sendingCurrency": { "type": "string", "description": "Sending Currency" }, "receivingCurrency": { "type": "string", "description": "Receiving Currency" }, "type": { "type": "string", "description": "RDA Type", "enum": ["inttransfer", "p2p", "p2b", "b2p", "b2b"] }, "senderMobNo": { "type": "string", "description": "Sender Mobile Number" }, "senderKyc": { "type": "object", "description": "Sender KYC Details", "properties": { "nationality": { "type": "string", "description": "Sender's Nationality" }, "dateOfBirth": { "type": "string", "description": "Sender's Date of Birth" }, "document": { "type": "object", "description": "Sender's Document", "properties": { "idType": { "type": "string", "description": "Document Type" }, "idNumber": { "type": "string", "description": "Document Number" }, "expiryDate": { "type": "string", "description": "Document expiration date" } }, "required": ["idType", "idNumber", "expiryDate"] }, "postalAddress": { "type": "object", "description": "Sender's Postal Address", "properties": { "addressLine1": { "type": "string", "description": "Address Line 1" }, "city": { "type": "string", "description": "City" }, "country": { "type": "string", "description": "Country" } }, "required": ["addressLine1", "city", "country"] }, "subjectName": { "type": "object", "description": "Sender's Name", "properties": { "firstName": { "type": "string", "description": "First Name" }, "lastName": { "type": "string", "description": "Last Name" }, "fullName": { "type": "string", "description": "Full Name" } }, "required": ["firstName", "lastName", "fullName"] }, "primaryContactCountryCode": { "type": "string", "description": "Primary Contact's Country Code" }, "primaryContactNo": { "type": "string", "description": "Primary Contact Number" }, "primaryContactNoType": { "type": "string", "description": "Primary Contact Type" } }, "required": ["nationality", "dateOfBirth", "document", "postalAddress", "subjectName"] }, "receivingCountry": { "type": "string", "description": "Receiving Country" }, "remittancePurpose": { "type": "string", "description": "Remittance Purpose" }, "sourceOfFunds": { "type": "string", "description": "Source Of Funds" }, "relationshipSender": { "type": "string", "description": "Relationship with Sender" }, "originCountry": { "type": "string", "description": "Country of origin" }, "senderBusinessKyc": { "type": "object", "description": "Business KYC details", "properties": { "pinCode": { "type": "string", "description": "Pincode" }, "address": { "type": "string", "description": "Address" }, "primaryContactCountryCode": { "type": "string", "description": "Primary Contact's Country Code" }, "primaryContactNo": { "type": "string", "description": "Primary Contact Number" }, "email": { "type": "string", "description": "Business Email ID" }, "name": { "type": "string", "description": "Business Name" }, "addressCountryCode": { "type": "string", "description": "Business Address Country Code" }, "countryCode": { "type": "string", "description": "Country Code" }, "regType": { "type": "string", "description": "Registration Type" }, "regIssuedBy": { "type": "string", "description": "Registration Issued By" }, "regIssuedAt": { "type": "string", "description": "Registration Issued At" }, "regNumber": { "type": "string", "description": "Registration Number" }, "regIssueDate": { "type": "string", "description": "Registration Issued Date" }, "idValidThru": { "type": "string", "description": "Registration ID Validation Date" } }, "required": ["address", "primaryContactCountryCode", "primaryContactNo", "email", "name", "countryCode", "regType", "regNumber", "regIssueDate", "idValidThru"] } }, "required": ["senderMobNo", "remittancePurpose", "sourceOfFunds", "originCountry"] } }, "required": ["beneId", "amount", "transferId"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "TransferResponse", "description": "Transfer Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "string" }, "utr": { "type": "string" }, "acknowledged": { "type": "integer" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.RequestTransfer = RequestTransfer;
const RequestTransferV12 = { "body": { "title": "TransferRequestV12", "description": "Transfer Request v1.2", "type": "object", "properties": { "amount": { "type": "number", "format": "double", "description": "amount to be transferred. Decimals allowed (>= 1.00)", "examples": ["1.00"], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "beneId": { "type": "string", "description": "Beneficiary Id. Alphanumeric characters allowed.", "examples": ["JOHN18011"] }, "transferId": { "type": "string", "description": "A unique Id to identify this transfer. Alphanumeric and underscore (_) allowed (40 character limit).", "examples": ["JUNOB2018"] }, "transferMode": { "type": "string", "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer." }, "remarks": { "type": "string", "description": "Additional remarks, if any. Alphanumeric and white spaces allowed (70 characters limit)." }, "transferType": { "type": "string", "description": "Transfer Type", "maxLength": 7 }, "ipAddress": { "type": "string", "description": "IP Address of the caller" }, "product": { "type": "string", "description": "Cashfree Product Name" }, "paymentInstrumentId": { "type": "string", "description": "Specify the fund source ID from where you want the amount to be debited." } }, "required": ["beneId", "amount", "transferId"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "TransferResponse", "description": "Transfer Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" }, "data": { "type": "object", "properties": { "referenceId": { "type": "string" }, "utr": { "type": "string" }, "acknowledged": { "type": "integer" } } } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.RequestTransferV12 = RequestTransferV12;
const SelfWithdrawal = { "body": { "title": "SelfWithdrawalRequest", "description": "Self Withdrawal Request", "type": "object", "properties": { "withdrawalId": { "type": "string", "description": "Unique identifier for the withdrawal, alphanumeric allowed (50 character limit)", "examples": ["1"] }, "amount": { "type": "number", "format": "double", "description": "Amount to be withdrawn, decimal (>= 1.00)", "examples": [20], "minimum": -1.7976931348623157e+308, "maximum": 1.7976931348623157e+308 }, "remarks": { "type": "string", "description": "Remarks, if any. Alphanumeric and white space (70 character limit)" } }, "required": ["withdrawalId", "amount"], "$schema": "http://json-schema.org/draft-04/schema#" }, "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "SelfWithdrawalResponse", "description": "Self Withdrawal Response", "type": "object", "properties": { "status": { "type": "string" }, "subCode": { "type": "string" }, "message": { "type": "string" } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.SelfWithdrawal = SelfWithdrawal;
const VerifyToken = { "metadata": { "allOf": [{ "type": "object", "properties": { "x-request-id": { "type": "string", "examples": ["4dfb9780-46fe-11ee-be56-0242ac120002"], "$schema": "http://json-schema.org/draft-04/schema#", "description": "Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree" } }, "required": [] }] }, "response": { "200": { "title": "VerifyTokenResponse", "description": "Response for verifying Bearer Token", "type": "object", "properties": { "status": { "type": "string", "examples": ["SUCCESS"] }, "message": { "type": "string", "examples": ["Token is valid"] }, "subCode": { "type": "string", "examples": ["200"] } }, "$schema": "http://json-schema.org/draft-04/schema#" }, "403": { "title": "Error", "description": "Error Response for non-2XX cases", "type": "object", "properties": { "status": { "type": "string", "description": "Overall status of the API call" }, "message": { "type": "string", "description": "Detailed message explaining the response" }, "subCode": { "type": "string", "description": "Status code acting as an umbrella for the response" } }, "$schema": "http://json-schema.org/draft-04/schema#" } } };
exports.VerifyToken = VerifyToken;
